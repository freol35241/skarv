{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Skarv","text":"<p>skarv is a Swedish noun that refers to the point where two things are joined together. Translations to English include joint, splice, connection and similar words. Interestingly, it is also the Swedish word for cormorant (the bird).</p>"},{"location":"#what-is-skarv","title":"What is Skarv?","text":"<p>Skarv is a simple, synchronous, thread-safe, single process, in-memory message broker written in Python. It provides a minimalist API for processing real-time data from multiple sources to multiple sinks with intermediate processing capabilities.</p>"},{"location":"#why-skarv","title":"Why Skarv?","text":"<p>Skarv was created to provide the most simplistic API possible for real-time data processing. When you need to:</p> <ul> <li>Connect multiple data sources to multiple consumers</li> <li>Process data in real-time with minimal latency</li> <li>Apply transformations to data streams</li> <li>Keep things simple without the complexity of distributed systems</li> </ul> <p>Skarv offers a lightweight, in-memory solution that's perfect for single-process applications that need message routing and processing capabilities.</p>"},{"location":"#how-does-skarv-work","title":"How does Skarv work?","text":"<p>Skarv leverages the concept of Key Expressions from Zenoh to provide flexible message routing. Here's how it works:</p>"},{"location":"#core-concepts","title":"Core Concepts","text":"<ol> <li>Key Expressions: Messages are identified by key expressions (e.g., <code>sensor/temperature</code>, <code>device/*/status</code>)</li> <li>In-Memory Storage: All data is stored in memory for maximum performance</li> <li>Thread-Safe Operations: All operations are thread-safe using locks</li> <li>Middleware Support: Transform data as it flows through the system</li> </ol>"},{"location":"#basic-operations","title":"Basic Operations","text":"<pre><code>import skarv\n\n# Subscribe to messages\n@skarv.subscribe(\"sensor/*\")\ndef handle_sensor_data(sample):\n    print(f\"Received: {sample.key_expr} = {sample.value}\")\n\n# Publish a message\nskarv.put(\"sensor/temperature\", 23.5)\n\n# Retrieve messages\nsamples = skarv.get(\"sensor/*\")\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Simple API: Minimal learning curve</li> <li>Thread-Safe: Safe for concurrent access</li> <li>Middleware Support: Transform data on-the-fly</li> <li>Pattern Matching: Use wildcards and patterns for flexible routing</li> <li>Synchronous: Predictable, easy-to-debug behavior</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pip install skarv\n</code></pre> <pre><code>import skarv\n\n# Subscribe to all sensor data\n@skarv.subscribe(\"sensor/**\")\ndef log_sensor_data(sample):\n    print(f\"Sensor {sample.key_expr}: {sample.value}\")\n\n# Add some data\nskarv.put(\"sensor/temperature\", 22.5)\nskarv.put(\"sensor/humidity\", 65.2)\nskarv.put(\"sensor/pressure\", 1013.25)\n</code></pre>"},{"location":"#when-to-use-skarv","title":"When to Use Skarv","text":"<p>Skarv is ideal for:</p> <ul> <li>IoT Applications: Connecting sensors to processing logic</li> <li>Data Pipelines: Simple ETL processes</li> <li>Event Systems: Internal event routing</li> <li>Prototyping: Quick message broker setup</li> <li>Single-Process Applications: When distributed systems are overkill</li> </ul>"},{"location":"#when-not-to-use-skarv","title":"When Not to Use Skarv","text":"<p>Skarv is not suitable for:</p> <ul> <li>Distributed Systems: No network communication</li> <li>Persistence: Data is lost on restart</li> <li>High Availability: Single point of failure</li> <li>Large Scale: Limited by memory and single process</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>API Reference</li> <li>Examples </li> </ul>"},{"location":"api/concurrency/","title":"Concurrency","text":"<p>This page documents the concurrency utilities provided by Skarv.</p>"},{"location":"api/concurrency/#coroutine-scheduling","title":"Coroutine Scheduling","text":""},{"location":"api/concurrency/#skarv.concurrency.schedule_coroutine","title":"<code>skarv.concurrency.schedule_coroutine(coro: Awaitable) -&gt; asyncio.Future</code>","text":"<p>Schedule a coroutine to run in a background asyncio event loop.</p> <p>If the background event loop is not running, it will be started in a new thread.</p> <p>Parameters:</p> Name Type Description Default <code>coro</code> <code>Awaitable</code> <p>The coroutine to schedule.</p> required <p>Returns:</p> Type Description <code>Future</code> <p>asyncio.Future: A Future representing the execution of the coroutine.</p> Source code in <code>skarv/concurrency.py</code> <pre><code>def schedule_coroutine(coro: Awaitable) -&gt; asyncio.Future:\n    \"\"\"Schedule a coroutine to run in a background asyncio event loop.\n\n    If the background event loop is not running, it will be started in a new thread.\n\n    Args:\n        coro (Awaitable): The coroutine to schedule.\n\n    Returns:\n        asyncio.Future: A Future representing the execution of the coroutine.\n    \"\"\"\n    global _background_loop\n\n    if _background_loop is None:\n        logger.info(\"Starting asyncio event loop in background thread\")\n        _background_loop = asyncio.new_event_loop()\n\n        def _initializer():\n            asyncio.set_event_loop(_background_loop)\n            _background_loop.run_forever()\n            logger.info(\"Background event loop initialized.\")\n\n        threading.Thread(target=_initializer, daemon=True).start()\n\n    logger.debug(\"Scheduling coroutine...\")\n    return asyncio.run_coroutine_threadsafe(coro, _background_loop)\n</code></pre>"},{"location":"api/core/","title":"Core API","text":"<p>This page documents the core functions and classes of the Skarv package.</p>"},{"location":"api/core/#classes","title":"Classes","text":""},{"location":"api/core/#skarv.Sample","title":"<code>skarv.Sample</code>  <code>dataclass</code>","text":"<p>A data sample consisting of a key expression and its associated value.</p> <p>Attributes:</p> Name Type Description <code>key_expr</code> <code>KeyExpr</code> <p>The key expression associated with the sample.</p> <code>value</code> <code>Any</code> <p>The value of the sample.</p> Source code in <code>skarv/__init__.py</code> <pre><code>@dataclass(frozen=True)\nclass Sample:\n    \"\"\"A data sample consisting of a key expression and its associated value.\n\n    Attributes:\n        key_expr (KeyExpr): The key expression associated with the sample.\n        value (Any): The value of the sample.\n    \"\"\"\n\n    key_expr: KeyExpr\n    value: Any\n</code></pre>"},{"location":"api/core/#skarv.Subscriber","title":"<code>skarv.Subscriber</code>  <code>dataclass</code>","text":"<p>A subscriber that listens to updates for a specific key expression.</p> <p>Attributes:</p> Name Type Description <code>key_expr</code> <code>KeyExpr</code> <p>The key expression to subscribe to.</p> <code>callback</code> <code>Callable[[Any], None]</code> <p>The callback function to invoke when a matching sample is published.</p> Source code in <code>skarv/__init__.py</code> <pre><code>@dataclass(frozen=True)\nclass Subscriber:\n    \"\"\"A subscriber that listens to updates for a specific key expression.\n\n    Attributes:\n        key_expr (KeyExpr): The key expression to subscribe to.\n        callback (Callable[[Any], None]): The callback function to invoke when a matching sample is published.\n    \"\"\"\n\n    key_expr: KeyExpr\n    callback: Callable[[Any], None]\n</code></pre>"},{"location":"api/core/#skarv.Middleware","title":"<code>skarv.Middleware</code>  <code>dataclass</code>","text":"<p>A middleware operator that processes values for a specific key expression.</p> <p>Attributes:</p> Name Type Description <code>key_expr</code> <code>KeyExpr</code> <p>The key expression the middleware applies to.</p> <code>operator</code> <code>Callable[[Any], Any]</code> <p>The operator function to process the value.</p> Source code in <code>skarv/__init__.py</code> <pre><code>@dataclass(frozen=True)\nclass Middleware:\n    \"\"\"A middleware operator that processes values for a specific key expression.\n\n    Attributes:\n        key_expr (KeyExpr): The key expression the middleware applies to.\n        operator (Callable[[Any], Any]): The operator function to process the value.\n    \"\"\"\n\n    key_expr: KeyExpr\n    operator: Callable[[Any], Any]\n</code></pre>"},{"location":"api/core/#functions","title":"Functions","text":""},{"location":"api/core/#skarv.put","title":"<code>skarv.put(key: str, value: Any)</code>","text":"<p>Store a value for a given key, passing it through any registered middlewares and notifying subscribers.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to associate with the value.</p> required <code>value</code> <code>Any</code> <p>The value to store.</p> required Source code in <code>skarv/__init__.py</code> <pre><code>def put(key: str, value: Any):\n    \"\"\"Store a value for a given key, passing it through any registered middlewares and notifying subscribers.\n\n    Args:\n        key (str): The key to associate with the value.\n        value (Any): The value to store.\n    \"\"\"\n    ke: KeyExpr = KeyExpr.autocanonize(key)\n\n    # Pass through middlewares\n    for middleware in _find_matching_middlewares(key):\n        value = middleware.operator(value)\n\n        if value is None:\n            return\n\n    # Add final value to vault\n    with _vault_lock:\n        _vault[ke] = value\n\n    # Trigger subscribers\n    sample = Sample(ke, value)\n    for subscriber in _find_matching_subscribers(key):\n        subscriber.callback(sample)\n</code></pre>"},{"location":"api/core/#skarv.subscribe","title":"<code>skarv.subscribe(*keys: str)</code>","text":"<p>Decorator to subscribe a callback to one or more keys.</p> <p>Parameters:</p> Name Type Description Default <code>*keys</code> <code>str</code> <p>One or more keys to subscribe to.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>Callable</code> <p>A decorator that registers the callback as a subscriber.</p> Source code in <code>skarv/__init__.py</code> <pre><code>def subscribe(*keys: str):\n    \"\"\"Decorator to subscribe a callback to one or more keys.\n\n    Args:\n        *keys (str): One or more keys to subscribe to.\n\n    Returns:\n        Callable: A decorator that registers the callback as a subscriber.\n    \"\"\"\n    logger.debug(\"Subscribing to: %s\", keys)\n\n    # Adding a new subscriber means we need to clear the cache\n    _find_matching_subscribers.cache_clear()\n    logger.debug(\"Cleared subscriber cache.\")\n\n    def decorator(callback: Callable):\n        for key in keys:\n            ke = KeyExpr.autocanonize(key)\n            logger.debug(\"Adding internal Subscriber for %s\", ke)\n            _subscribers.add(Subscriber(ke, callback))\n\n        return callback\n\n    return decorator\n</code></pre>"},{"location":"api/core/#skarv.get","title":"<code>skarv.get(key: str) -&gt; List[Sample]</code>","text":"<p>Retrieve all samples whose keys intersect with the given key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to search for.</p> required <p>Returns:</p> Type Description <code>List[Sample]</code> <p>List[Sample]: A list of matching samples.</p> Source code in <code>skarv/__init__.py</code> <pre><code>def get(key: str) -&gt; List[Sample]:\n    \"\"\"Retrieve all samples whose keys intersect with the given key.\n\n    Args:\n        key (str): The key to search for.\n\n    Returns:\n        List[Sample]: A list of matching samples.\n    \"\"\"\n    logger.debug(\"Getting for %s\", key)\n    req_ke = KeyExpr.autocanonize(key)\n\n    with _vault_lock:\n        samples = [\n            Sample(rep_ke, value)\n            for rep_ke, value in _vault.items()\n            if req_ke.intersects(rep_ke)\n        ]\n\n    return samples\n</code></pre>"},{"location":"api/core/#skarv.register_middleware","title":"<code>skarv.register_middleware(key: str, operator: Callable[[Any], Any])</code>","text":"<p>Register a middleware operator for a given key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to associate with the middleware.</p> required <code>operator</code> <code>Callable[[Any], Any]</code> <p>The operator function to process values.</p> required Source code in <code>skarv/__init__.py</code> <pre><code>def register_middleware(key: str, operator: Callable[[Any], Any]):\n    \"\"\"Register a middleware operator for a given key.\n\n    Args:\n        key (str): The key to associate with the middleware.\n        operator (Callable[[Any], Any]): The operator function to process values.\n    \"\"\"\n    logger.debug(\"Registering middleware on %s\", key)\n    ke = KeyExpr.autocanonize(key)\n    _middlewares.add(Middleware(ke, operator))\n    _find_matching_middlewares.cache_clear()\n</code></pre>"},{"location":"api/middleware/","title":"Middleware Functions","text":"<p>This page documents the built-in middleware functions provided by Skarv.</p>"},{"location":"api/middleware/#throttling","title":"Throttling","text":""},{"location":"api/middleware/#skarv.middlewares.throttle","title":"<code>skarv.middlewares.throttle(at_most_every: float) -&gt; Callable[[Any], Any | None]</code>","text":"<p>Create a throttling middleware that allows values through at most once every specified interval.</p> <p>Parameters:</p> Name Type Description Default <code>at_most_every</code> <code>float</code> <p>Minimum interval in seconds between allowed values.</p> required <p>Returns:</p> Type Description <code>Callable[[Any], Any | None]</code> <p>Callable[[Any], Any | None]: Middleware function that returns the value or None if throttled.</p> Source code in <code>skarv/middlewares.py</code> <pre><code>def throttle(at_most_every: float) -&gt; Callable[[Any], Any | None]:\n    \"\"\"Create a throttling middleware that allows values through at most once every specified interval.\n\n    Args:\n        at_most_every (float): Minimum interval in seconds between allowed values.\n\n    Returns:\n        Callable[[Any], Any | None]: Middleware function that returns the value or None if throttled.\n    \"\"\"\n    lock = Lock()\n    last_call_time = 0.0\n\n    def _throttler(value: Any) -&gt; Any | None:\n        nonlocal last_call_time\n\n        with lock:\n\n            now = time.time()\n\n            # Should we throttle?\n            if (now - last_call_time) &lt; at_most_every:\n                return None\n\n            last_call_time = now\n            return value\n\n    return _throttler\n</code></pre>"},{"location":"api/middleware/#averaging","title":"Averaging","text":""},{"location":"api/middleware/#skarv.middlewares.average","title":"<code>skarv.middlewares.average(no_of_samples: int) -&gt; Callable[[Numeric], Numeric]</code>","text":"<p>Create a middleware that computes the moving average over a window of samples.</p> <p>Parameters:</p> Name Type Description Default <code>no_of_samples</code> <code>int</code> <p>Number of samples to average over.</p> required <p>Returns:</p> Type Description <code>Callable[[Numeric], Numeric]</code> <p>Callable[[Numeric], Numeric]: Middleware function that returns the moving average.</p> Source code in <code>skarv/middlewares.py</code> <pre><code>def average(no_of_samples: int) -&gt; Callable[[Numeric], Numeric]:\n    \"\"\"Create a middleware that computes the moving average over a window of samples.\n\n    Args:\n        no_of_samples (int): Number of samples to average over.\n\n    Returns:\n        Callable[[Numeric], Numeric]: Middleware function that returns the moving average.\n    \"\"\"\n    lock = Lock()\n    window = deque(maxlen=no_of_samples)\n\n    def _averager(value: Numeric) -&gt; Numeric:\n        nonlocal window\n\n        with lock:\n\n            window.append(value)\n\n            return sum(window) / len(window)\n\n    return _averager\n</code></pre>"},{"location":"api/middleware/#weighted-averaging","title":"Weighted Averaging","text":""},{"location":"api/middleware/#skarv.middlewares.weighted_average","title":"<code>skarv.middlewares.weighted_average(no_of_samples: int) -&gt; Callable[[Numeric], Numeric]</code>","text":"<p>Create a middleware that computes a weighted moving average over a window of samples.</p> <p>Parameters:</p> Name Type Description Default <code>no_of_samples</code> <code>int</code> <p>Number of samples to use for the weighted average.</p> required <p>Returns:</p> Type Description <code>Callable[[Numeric], Numeric]</code> <p>Callable[[Numeric], Numeric]: Middleware function that returns the weighted moving average.</p> Source code in <code>skarv/middlewares.py</code> <pre><code>def weighted_average(no_of_samples: int) -&gt; Callable[[Numeric], Numeric]:\n    \"\"\"Create a middleware that computes a weighted moving average over a window of samples.\n\n    Args:\n        no_of_samples (int): Number of samples to use for the weighted average.\n\n    Returns:\n        Callable[[Numeric], Numeric]: Middleware function that returns the weighted moving average.\n    \"\"\"\n    lock = Lock()\n    window = deque(maxlen=no_of_samples)\n\n    def _averager(value: Numeric) -&gt; Numeric:\n        nonlocal window\n\n        with lock:\n\n            window.appendleft(value)\n\n            return sum(map(operator.mul, window, _get_weights(len(window))))\n\n    return _averager\n</code></pre>"},{"location":"api/middleware/#differentiation","title":"Differentiation","text":""},{"location":"api/middleware/#skarv.middlewares.differentiate","title":"<code>skarv.middlewares.differentiate() -&gt; Callable[[Numeric], Numeric | None]</code>","text":"<p>Create a middleware that computes the numerical derivative of the input values.</p> <p>Returns:</p> Type Description <code>Callable[[Numeric], Numeric | None]</code> <p>Callable[[Numeric], Numeric | None]: Middleware function that returns the derivative or None for the first value.</p> Source code in <code>skarv/middlewares.py</code> <pre><code>def differentiate() -&gt; Callable[[Numeric], Numeric | None]:\n    \"\"\"Create a middleware that computes the numerical derivative of the input values.\n\n    Returns:\n        Callable[[Numeric], Numeric | None]: Middleware function that returns the derivative or None for the first value.\n    \"\"\"\n    lock = Lock()\n    last_value = None\n    last_time = None\n\n    def _differentiator(value: Numeric) -&gt; Numeric | None:\n        nonlocal last_value, last_time\n\n        with lock:\n\n            if last_value is None:\n                last_value = value\n                last_time = time.time()\n                return None\n\n            now = time.time()\n\n            derivative = (value - last_value) / (now - last_time)\n\n            last_value = value\n            last_time = now\n\n            return derivative\n\n    return _differentiator\n</code></pre>"},{"location":"api/middleware/#batching","title":"Batching","text":""},{"location":"api/middleware/#skarv.middlewares.batch","title":"<code>skarv.middlewares.batch(size: int) -&gt; Callable[[Any], Sequence[Any] | None]</code>","text":"<p>Create a middleware that batches input values and outputs them as a sequence when the batch size is reached.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> <p>The number of values to collect before emitting a batch.</p> required <p>Returns:</p> Type Description <code>Callable[[Any], Sequence[Any] | None]</code> <p>Callable[[Any], Sequence[Any] | None]: Middleware function that returns a batch or None if not enough values have been collected.</p> Source code in <code>skarv/middlewares.py</code> <pre><code>def batch(size: int) -&gt; Callable[[Any], Sequence[Any] | None]:\n    \"\"\"Create a middleware that batches input values and outputs them as a sequence when the batch size is reached.\n\n    Args:\n        size (int): The number of values to collect before emitting a batch.\n\n    Returns:\n        Callable[[Any], Sequence[Any] | None]: Middleware function that returns a batch or None if not enough values have been collected.\n    \"\"\"\n    lock = Lock()\n    batch = []\n\n    def _batcher(value: Any) -&gt; Sequence[Any] | None:\n\n        with lock:\n            batch.append(value)\n\n            if len(batch) &gt;= size:\n                output = tuple(batch)\n                batch.clear()\n                return output\n\n            return None\n\n    return _batcher\n</code></pre>"},{"location":"api/utilities/","title":"Utilities","text":"<p>This page documents the utility functions provided by Skarv.</p>"},{"location":"api/utilities/#periodic-execution","title":"Periodic Execution","text":""},{"location":"api/utilities/#skarv.utilities.call_every","title":"<code>skarv.utilities.call_every(seconds: float, wait_first: bool = False)</code>","text":"<p>Decorator to repeatedly call a function every specified number of seconds.</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>float</code> <p>The interval in seconds between calls.</p> required <code>wait_first</code> <code>bool</code> <p>If True, wait for the interval before the first call. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Callable</code> <p>A decorator that schedules the function to be called periodically.</p> Source code in <code>skarv/utilities.py</code> <pre><code>def call_every(\n    seconds: float,\n    wait_first: bool = False,\n):\n    \"\"\"Decorator to repeatedly call a function every specified number of seconds.\n\n    Args:\n        seconds (float): The interval in seconds between calls.\n        wait_first (bool, optional): If True, wait for the interval before the first call. Defaults to False.\n\n    Returns:\n        Callable: A decorator that schedules the function to be called periodically.\n    \"\"\"\n\n    def timed_task_decorator(func: Callable) -&gt; Callable:\n\n        is_coroutine = asyncio.iscoroutinefunction(func)\n\n        async def timer():\n\n            if wait_first:\n                await asyncio.sleep(seconds)\n\n            while True:\n                t_0 = time.time()\n\n                try:\n                    if is_coroutine:\n                        await func()\n                    else:\n                        await asyncio.get_event_loop().run_in_executor(None, func)\n                except Exception:  # pylint: disable=broad-except\n                    logger.exception(f\"call_every: Exception in {func}\")\n\n                remainder = seconds - (time.time() - t_0)\n\n                if remainder &lt; 0:\n                    warnings.warn(\n                        f\"Function {func} has an execution time the exceeds\"\n                        f\" the requested execution interval of {seconds}s!\",\n                        UserWarning,\n                    )\n\n                await asyncio.sleep(max(remainder, 0))\n\n        # Put `timer` on the event loop on service startup\n        schedule_coroutine(timer())\n        return func\n\n    return timed_task_decorator\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Skarv requires Python 3.10 or higher.</p>"},{"location":"getting-started/installation/#installing-skarv","title":"Installing Skarv","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<p>The easiest way to install Skarv is using pip:</p> <pre><code>pip install skarv\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>If you want to install from the latest development version:</p> <pre><code>git clone https://github.com/freol/skarv.git\ncd skarv\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development work, install with development dependencies:</p> <pre><code>git clone https://github.com/freol/skarv.git\ncd skarv\npip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>Skarv has the following dependencies:</p> <ul> <li>eclipse-zenoh: For key expression handling and pattern matching</li> <li>Python 3.10+: For modern Python features and type hints</li> </ul>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that Skarv is installed correctly:</p> <pre><code>import skarv\n\n# Test basic functionality\n@skarv.subscribe(\"test/*\")\ndef test_handler(sample):\n    print(f\"Test successful: {sample.key_expr} = {sample.value}\")\n\nskarv.put(\"test/installation\", \"working\")\n</code></pre> <p>If you see the output \"Test successful: test/installation = working\", then Skarv is installed correctly!</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Tutorial</li> <li>Overview </li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will walk you through the basic concepts and operations in Skarv.</p>"},{"location":"getting-started/quick-start/#basic-concepts","title":"Basic Concepts","text":"<p>Skarv is built around three main concepts:</p> <ol> <li>Publishing: Putting data into the system with a key</li> <li>Subscribing: Listening for data with matching keys</li> <li>Retrieving: Getting stored data by key patterns</li> </ol>"},{"location":"getting-started/quick-start/#your-first-skarv-application","title":"Your First Skarv Application","text":"<p>Let's create a simple sensor monitoring system:</p> <pre><code>import skarv\nimport time\n\n# Subscribe to temperature sensor data\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_temperature(sample):\n    print(f\"Temperature: {sample.value}\u00b0C\")\n\n# Subscribe to all sensor data\n@skarv.subscribe(\"sensor/*\")\ndef handle_all_sensors(sample):\n    print(f\"All sensors - {sample.key_expr}: {sample.value}\")\n\n# Simulate sensor readings\nskarv.put(\"sensor/temperature\", 22.5)\nskarv.put(\"sensor/humidity\", 65.2)\nskarv.put(\"sensor/pressure\", 1013.25)\n\n# Wait a moment for processing\ntime.sleep(0.1)\n</code></pre> <p>This will output: <pre><code>Temperature: 22.5\u00b0C\nAll sensors - sensor/temperature: 22.5\nAll sensors - sensor/humidity: 65.2\nAll sensors - sensor/pressure: 1013.25\n</code></pre></p>"},{"location":"getting-started/quick-start/#key-expressions","title":"Key Expressions","text":"<p>Skarv uses key expressions for flexible message routing:</p> <pre><code># Exact match\nskarv.put(\"device/001/status\", \"online\")\n\n# Wildcard patterns\n@skarv.subscribe(\"device/*/status\")  # Matches any device status\n@skarv.subscribe(\"sensor/**\")        # Matches all sensor data\n@skarv.subscribe(\"*/temperature\")    # Matches any temperature reading\n</code></pre>"},{"location":"getting-started/quick-start/#retrieving-data","title":"Retrieving Data","text":"<p>You can retrieve stored data using key patterns:</p> <pre><code># Store some data\nskarv.put(\"device/001/temperature\", 23.5)\nskarv.put(\"device/002/temperature\", 24.1)\nskarv.put(\"device/001/humidity\", 65.2)\n\n# Retrieve all device temperatures\ntemperatures = skarv.get(\"device/*/temperature\")\nprint(temperatures)\n# Output: [Sample(key_expr='device/001/temperature', value=23.5), \n#          Sample(key_expr='device/002/temperature', value=24.1)]\n\n# Retrieve all data for device 001\ndevice_001_data = skarv.get(\"device/001/*\")\nprint(device_001_data)\n# Output: [Sample(key_expr='device/001/temperature', value=23.5),\n#          Sample(key_expr='device/001/humidity', value=65.2)]\n</code></pre>"},{"location":"getting-started/quick-start/#using-middleware","title":"Using Middleware","text":"<p>Middleware allows you to transform data as it flows through the system:</p> <pre><code>import skarv\nfrom skarv.middlewares import throttle, average\n\n# Throttle temperature updates to at most once every 5 seconds\nskarv.register_middleware(\"sensor/temperature\", throttle(5.0))\n\n# Average humidity readings over 10 samples\nskarv.register_middleware(\"sensor/humidity\", average(10))\n\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_throttled_temperature(sample):\n    print(f\"Throttled temperature: {sample.value}\u00b0C\")\n\n@skarv.subscribe(\"sensor/humidity\")\ndef handle_averaged_humidity(sample):\n    print(f\"Averaged humidity: {sample.value}%\")\n\n# These will be processed by middleware\nskarv.put(\"sensor/temperature\", 22.5)\nskarv.put(\"sensor/humidity\", 65.2)\n</code></pre>"},{"location":"getting-started/quick-start/#complete-example-iot-dashboard","title":"Complete Example: IoT Dashboard","text":"<p>Here's a more complete example simulating an IoT dashboard:</p> <pre><code>import skarv\nimport time\nimport random\n\n# Dashboard handlers\n@skarv.subscribe(\"sensor/temperature\")\ndef update_temperature_display(sample):\n    print(f\"\ud83c\udf21\ufe0f  Temperature: {sample.value}\u00b0C\")\n\n@skarv.subscribe(\"sensor/humidity\")\ndef update_humidity_display(sample):\n    print(f\"\ud83d\udca7 Humidity: {sample.value}%\")\n\n@skarv.subscribe(\"device/*/status\")\ndef update_device_status(sample):\n    device_id = str(sample.key_expr).split('/')[1]\n    print(f\"\ud83d\udcf1 Device {device_id}: {sample.value}\")\n\n@skarv.subscribe(\"alert/*\")\ndef handle_alerts(sample):\n    print(f\"\ud83d\udea8 ALERT: {sample.key_expr} - {sample.value}\")\n\n# Simulate sensor readings\ndef simulate_sensors():\n    while True:\n        # Temperature fluctuates around 22\u00b0C\n        temp = 22 + random.uniform(-2, 2)\n        skarv.put(\"sensor/temperature\", round(temp, 1))\n\n        # Humidity fluctuates around 65%\n        humidity = 65 + random.uniform(-5, 5)\n        skarv.put(\"sensor/humidity\", round(humidity, 1))\n\n        # Check for alerts\n        if temp &gt; 24:\n            skarv.put(\"alert/high_temperature\", f\"Temperature too high: {temp}\u00b0C\")\n\n        time.sleep(2)\n\n# Start simulation\nprint(\"Starting IoT Dashboard...\")\nsimulate_sensors()\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics:</p> <ul> <li>Learn about Key Expressions</li> <li>Explore Middleware</li> <li>See More Examples</li> <li>Check the API Reference </li> </ul>"},{"location":"user-guide/examples/","title":"Examples","text":"<p>This page contains practical examples demonstrating how to use Skarv in real-world scenarios.</p>"},{"location":"user-guide/examples/#basic-examples","title":"Basic Examples","text":""},{"location":"user-guide/examples/#simple-message-broker","title":"Simple Message Broker","text":"<pre><code>import skarv\n\n# Set up subscribers\n@skarv.subscribe(\"chat/messages\")\ndef handle_chat_message(sample):\n    print(f\"\ud83d\udcac {sample.value}\")\n\n@skarv.subscribe(\"system/status\")\ndef handle_system_status(sample):\n    print(f\"\ud83d\udda5\ufe0f  System: {sample.value}\")\n\n# Send messages\nskarv.put(\"chat/messages\", \"Hello, world!\")\nskarv.put(\"system/status\", \"Online\")\nskarv.put(\"chat/messages\", \"How are you?\")\n\n# Retrieve all messages\nmessages = skarv.get(\"chat/messages\")\nprint(f\"All messages: {messages}\")\n</code></pre>"},{"location":"user-guide/examples/#event-logging-system","title":"Event Logging System","text":"<pre><code>import skarv\nimport time\n\n# Log different types of events\n@skarv.subscribe(\"log/info\")\ndef log_info(sample):\n    print(f\"\u2139\ufe0f  INFO: {sample.value}\")\n\n@skarv.subscribe(\"log/warning\")\ndef log_warning(sample):\n    print(f\"\u26a0\ufe0f  WARNING: {sample.value}\")\n\n@skarv.subscribe(\"log/error\")\ndef log_error(sample):\n    print(f\"\u274c ERROR: {sample.value}\")\n\n# Simulate application events\ndef simulate_application():\n    skarv.put(\"log/info\", \"Application started\")\n    time.sleep(1)\n    skarv.put(\"log/info\", \"Database connected\")\n    time.sleep(1)\n    skarv.put(\"log/warning\", \"High memory usage detected\")\n    time.sleep(1)\n    skarv.put(\"log/error\", \"Failed to connect to external service\")\n\nsimulate_application()\n</code></pre>"},{"location":"user-guide/examples/#iot-and-sensor-examples","title":"IoT and Sensor Examples","text":""},{"location":"user-guide/examples/#smart-home-monitoring","title":"Smart Home Monitoring","text":"<pre><code>import skarv\nimport time\nimport random\n\n# Room monitoring\n@skarv.subscribe(\"home/living/temperature\")\ndef living_room_temp(sample):\n    print(f\"\ud83c\udfe0 Living Room: {sample.value}\u00b0C\")\n\n@skarv.subscribe(\"home/bedroom/temperature\")\ndef bedroom_temp(sample):\n    print(f\"\ud83d\udecf\ufe0f  Bedroom: {sample.value}\u00b0C\")\n\n@skarv.subscribe(\"home/*/humidity\")\ndef any_room_humidity(sample):\n    room = str(sample.key_expr).split('/')[1]\n    print(f\"\ud83d\udca7 {room.title()}: {sample.value}% humidity\")\n\n@skarv.subscribe(\"home/**\")\ndef all_home_data(sample):\n    print(f\"\ud83d\udcca Home data: {sample.key_expr} = {sample.value}\")\n\n# Simulate smart home sensors\ndef simulate_smart_home():\n    while True:\n        # Living room sensors\n        skarv.put(\"home/living/temperature\", 22 + random.uniform(-1, 1))\n        skarv.put(\"home/living/humidity\", 45 + random.uniform(-5, 5))\n\n        # Bedroom sensors\n        skarv.put(\"home/bedroom/temperature\", 20 + random.uniform(-1, 1))\n        skarv.put(\"home/bedroom/humidity\", 50 + random.uniform(-5, 5))\n\n        time.sleep(2)\n\n# Start simulation\nprint(\"\ud83c\udfe0 Smart Home Monitoring Started\")\nsimulate_smart_home()\n</code></pre>"},{"location":"user-guide/examples/#industrial-sensor-network","title":"Industrial Sensor Network","text":"<pre><code>import skarv\nfrom skarv.middlewares import throttle, average, differentiate\nimport time\nimport random\n\n# Set up data processing pipeline\ndef setup_industrial_pipeline():\n    # Temperature monitoring with processing\n    skarv.register_middleware(\"factory/zone1/temperature\", throttle(5.0))\n    skarv.register_middleware(\"factory/zone1/temperature\", average(10))\n    skarv.register_middleware(\"factory/zone1/temperature\", differentiate())\n\n    # Pressure monitoring\n    skarv.register_middleware(\"factory/zone1/pressure\", average(5))\n\n    # Vibration monitoring with batching\n    skarv.register_middleware(\"factory/zone1/vibration\", batch(20))\n\n# Monitoring handlers\n@skarv.subscribe(\"factory/zone1/temperature\")\ndef monitor_temperature(sample):\n    if sample.value is not None:\n        print(f\"\ud83c\udf21\ufe0f  Zone 1 Temp Rate: {sample.value:.2f}\u00b0C/min\")\n\n@skarv.subscribe(\"factory/zone1/pressure\")\ndef monitor_pressure(sample):\n    print(f\"\ud83d\udcca Zone 1 Pressure: {sample.value:.1f} bar\")\n\n@skarv.subscribe(\"factory/zone1/vibration\")\ndef monitor_vibration(sample):\n    print(f\"\ud83d\udcc8 Zone 1 Vibration Batch: {len(sample.value)} readings\")\n\n@skarv.subscribe(\"factory/zone1/alarm\")\ndef handle_alarm(sample):\n    print(f\"\ud83d\udea8 ALARM: {sample.value}\")\n\n# Simulate industrial sensors\ndef simulate_industrial_sensors():\n    setup_industrial_pipeline()\n\n    temp = 25.0\n    pressure = 10.0\n\n    while True:\n        # Temperature with trend\n        temp += random.uniform(-0.5, 0.5)\n        skarv.put(\"factory/zone1/temperature\", round(temp, 1))\n\n        # Pressure fluctuations\n        pressure += random.uniform(-0.2, 0.2)\n        skarv.put(\"factory/zone1/pressure\", round(pressure, 1))\n\n        # Vibration readings\n        for i in range(25):\n            vibration = random.uniform(0, 10)\n            skarv.put(\"factory/zone1/vibration\", round(vibration, 2))\n\n        # Check for alarms\n        if temp &gt; 30:\n            skarv.put(\"factory/zone1/alarm\", f\"High temperature: {temp}\u00b0C\")\n\n        time.sleep(1)\n\nprint(\"\ud83c\udfed Industrial Monitoring Started\")\nsimulate_industrial_sensors()\n</code></pre>"},{"location":"user-guide/examples/#application-examples","title":"Application Examples","text":""},{"location":"user-guide/examples/#web-application-event-system","title":"Web Application Event System","text":"<pre><code>import skarv\nimport time\nimport random\n\n# User session management\n@skarv.subscribe(\"user/*/login\")\ndef user_login(sample):\n    user_id = str(sample.key_expr).split('/')[1]\n    print(f\"\ud83d\udc64 User {user_id} logged in\")\n\n@skarv.subscribe(\"user/*/logout\")\ndef user_logout(sample):\n    user_id = str(sample.key_expr).split('/')[1]\n    print(f\"\ud83d\udc4b User {user_id} logged out\")\n\n@skarv.subscribe(\"user/*/action\")\ndef user_action(sample):\n    user_id = str(sample.key_expr).split('/')[1]\n    print(f\"\ud83c\udfaf User {user_id} action: {sample.value}\")\n\n# System monitoring\n@skarv.subscribe(\"system/performance/*\")\ndef system_performance(sample):\n    metric = str(sample.key_expr).split('/')[-1]\n    print(f\"\u26a1 {metric}: {sample.value}\")\n\n@skarv.subscribe(\"system/error/*\")\ndef system_error(sample):\n    error_type = str(sample.key_expr).split('/')[-1]\n    print(f\"\u274c {error_type} error: {sample.value}\")\n\n# Simulate web application\ndef simulate_web_app():\n    users = [\"alice\", \"bob\", \"charlie\"]\n    actions = [\"view_page\", \"click_button\", \"submit_form\", \"download_file\"]\n\n    while True:\n        # Simulate user activity\n        user = random.choice(users)\n        action = random.choice(actions)\n\n        skarv.put(f\"user/{user}/action\", action)\n\n        # Simulate system metrics\n        skarv.put(\"system/performance/cpu\", random.uniform(20, 80))\n        skarv.put(\"system/performance/memory\", random.uniform(40, 90))\n        skarv.put(\"system/performance/response_time\", random.uniform(100, 500))\n\n        # Simulate occasional errors\n        if random.random() &lt; 0.1:\n            skarv.put(\"system/error/database\", \"Connection timeout\")\n\n        time.sleep(2)\n\nprint(\"\ud83c\udf10 Web Application Simulation Started\")\nsimulate_web_app()\n</code></pre>"},{"location":"user-guide/examples/#real-time-dashboard","title":"Real-time Dashboard","text":"<pre><code>import skarv\nimport time\nimport random\nfrom datetime import datetime\n\n# Dashboard components\n@skarv.subscribe(\"dashboard/metrics/*\")\ndef update_metric(sample):\n    metric = str(sample.key_expr).split('/')[-1]\n    print(f\"\ud83d\udcca {metric.upper()}: {sample.value}\")\n\n@skarv.subscribe(\"dashboard/alerts/*\")\ndef handle_alert(sample):\n    alert_type = str(sample.key_expr).split('/')[-1]\n    print(f\"\ud83d\udea8 {alert_type.upper()} ALERT: {sample.value}\")\n\n@skarv.subscribe(\"dashboard/status\")\ndef update_status(sample):\n    print(f\"\ud83d\udd04 System Status: {sample.value}\")\n\n# Data aggregation\n@skarv.subscribe(\"dashboard/metrics/temperature\")\ndef aggregate_temperatures(sample):\n    # Get all temperature readings\n    all_temps = skarv.get(\"sensor/*/temperature\")\n    if all_temps:\n        avg_temp = sum(s.value for s in all_temps) / len(all_temps)\n        max_temp = max(s.value for s in all_temps)\n        min_temp = min(s.value for s in all_temps)\n\n        print(f\"\ud83c\udf21\ufe0f  Temp Summary - Avg: {avg_temp:.1f}\u00b0C, Max: {max_temp:.1f}\u00b0C, Min: {min_temp:.1f}\u00b0C\")\n\n# Simulate dashboard data\ndef simulate_dashboard():\n    while True:\n        # Update metrics\n        skarv.put(\"dashboard/metrics/temperature\", random.uniform(18, 28))\n        skarv.put(\"dashboard/metrics/humidity\", random.uniform(40, 80))\n        skarv.put(\"dashboard/metrics/pressure\", random.uniform(1000, 1020))\n        skarv.put(\"dashboard/metrics/cpu_usage\", random.uniform(10, 90))\n\n        # Update status\n        skarv.put(\"dashboard/status\", f\"Last updated: {datetime.now().strftime('%H:%M:%S')}\")\n\n        # Generate alerts\n        if random.random() &lt; 0.05:\n            skarv.put(\"dashboard/alerts/high_temperature\", \"Temperature above threshold\")\n\n        if random.random() &lt; 0.03:\n            skarv.put(\"dashboard/alerts/low_pressure\", \"Pressure below normal range\")\n\n        time.sleep(3)\n\nprint(\"\ud83d\udcc8 Real-time Dashboard Started\")\nsimulate_dashboard()\n</code></pre>"},{"location":"user-guide/examples/#advanced-examples","title":"Advanced Examples","text":""},{"location":"user-guide/examples/#data-pipeline-with-custom-middleware","title":"Data Pipeline with Custom Middleware","text":"<pre><code>import skarv\nimport time\nimport json\n\n# Custom middleware for data validation and transformation\ndef validate_sensor_data(value):\n    \"\"\"Validate sensor data structure.\"\"\"\n    if isinstance(value, dict) and 'value' in value and 'timestamp' in value:\n        return value\n    return None\n\ndef add_metadata(value):\n    \"\"\"Add metadata to sensor data.\"\"\"\n    value['processed_at'] = time.time()\n    value['version'] = '1.0'\n    return value\n\ndef convert_units(value):\n    \"\"\"Convert temperature from Celsius to Fahrenheit.\"\"\"\n    if 'value' in value and isinstance(value['value'], (int, float)):\n        value['value_f'] = (value['value'] * 9/5) + 32\n    return value\n\n# Register custom middleware\nskarv.register_middleware(\"sensor/*\", validate_sensor_data)\nskarv.register_middleware(\"sensor/*\", add_metadata)\nskarv.register_middleware(\"sensor/*\", convert_units)\n\n# Data processing handlers\n@skarv.subscribe(\"sensor/temperature\")\ndef process_temperature(sample):\n    data = sample.value\n    print(f\"\ud83c\udf21\ufe0f  Temperature: {data['value']}\u00b0C ({data['value_f']:.1f}\u00b0F)\")\n    print(f\"   Timestamp: {data['timestamp']}\")\n    print(f\"   Processed: {data['processed_at']}\")\n\n@skarv.subscribe(\"sensor/humidity\")\ndef process_humidity(sample):\n    data = sample.value\n    print(f\"\ud83d\udca7 Humidity: {data['value']}%\")\n    print(f\"   Timestamp: {data['timestamp']}\")\n\n# Simulate sensor data with proper structure\ndef simulate_structured_sensors():\n    while True:\n        # Temperature data\n        temp_data = {\n            'value': 20 + random.uniform(-5, 5),\n            'timestamp': time.time()\n        }\n        skarv.put(\"sensor/temperature\", temp_data)\n\n        # Humidity data\n        humidity_data = {\n            'value': 60 + random.uniform(-10, 10),\n            'timestamp': time.time()\n        }\n        skarv.put(\"sensor/humidity\", humidity_data)\n\n        time.sleep(2)\n\nprint(\"\ud83d\udd27 Advanced Data Pipeline Started\")\nsimulate_structured_sensors()\n</code></pre>"},{"location":"user-guide/examples/#multi-service-communication","title":"Multi-Service Communication","text":"<pre><code>import skarv\nimport time\nimport threading\n\n# Service A: Data Producer\ndef service_a():\n    \"\"\"Service A produces sensor data.\"\"\"\n    while True:\n        skarv.put(\"service_a/sensor_data\", {\n            'temperature': 20 + random.uniform(-2, 2),\n            'humidity': 60 + random.uniform(-5, 5),\n            'timestamp': time.time()\n        })\n        time.sleep(1)\n\n# Service B: Data Processor\n@skarv.subscribe(\"service_a/sensor_data\")\ndef service_b_processor(sample):\n    \"\"\"Service B processes sensor data.\"\"\"\n    data = sample.value\n    processed_data = {\n        'original': data,\n        'processed_at': time.time(),\n        'status': 'processed'\n    }\n    skarv.put(\"service_b/processed_data\", processed_data)\n\n# Service C: Data Consumer\n@skarv.subscribe(\"service_b/processed_data\")\ndef service_c_consumer(sample):\n    \"\"\"Service C consumes processed data.\"\"\"\n    data = sample.value\n    print(f\"\ud83d\udce6 Service C received: {data['status']}\")\n    print(f\"   Original temp: {data['original']['temperature']:.1f}\u00b0C\")\n    print(f\"   Processed at: {data['processed_at']}\")\n\n# Service D: Monitoring\n@skarv.subscribe(\"service_*/**\")\ndef service_monitor(sample):\n    \"\"\"Monitor all service communications.\"\"\"\n    service = str(sample.key_expr).split('/')[0]\n    print(f\"\ud83d\udd0d {service} activity detected\")\n\n# Start services\ndef start_multi_service_system():\n    print(\"\ud83d\ude80 Starting Multi-Service System\")\n\n    # Start service A in a separate thread\n    service_a_thread = threading.Thread(target=service_a, daemon=True)\n    service_a_thread.start()\n\n    # Main thread continues to handle other services\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        print(\"\ud83d\uded1 Stopping Multi-Service System\")\n\nstart_multi_service_system()\n</code></pre>"},{"location":"user-guide/examples/#performance-examples","title":"Performance Examples","text":""},{"location":"user-guide/examples/#high-frequency-data-processing","title":"High-Frequency Data Processing","text":"<pre><code>import skarv\nfrom skarv.middlewares import throttle, batch\nimport time\nimport threading\n\n# Set up high-frequency data processing\nskarv.register_middleware(\"high_freq/data\", throttle(0.1))  # Max 10 updates/sec\nskarv.register_middleware(\"high_freq/data\", batch(100))     # Batch 100 readings\n\n# Data handlers\n@skarv.subscribe(\"high_freq/data\")\ndef handle_batched_data(sample):\n    print(f\"\ud83d\udcca Received batch of {len(sample.value)} readings\")\n    avg_value = sum(sample.value) / len(sample.value)\n    print(f\"   Average: {avg_value:.2f}\")\n\n# High-frequency data producer\ndef high_frequency_producer():\n    \"\"\"Produce data at high frequency.\"\"\"\n    counter = 0\n    while True:\n        skarv.put(\"high_freq/data\", counter)\n        counter += 1\n        time.sleep(0.01)  # 100 Hz\n\n# Performance monitoring\n@skarv.subscribe(\"high_freq/performance\")\ndef monitor_performance(sample):\n    print(f\"\u26a1 Performance: {sample.value}\")\n\n# Start high-frequency processing\ndef start_high_frequency_system():\n    print(\"\u26a1 Starting High-Frequency Data Processing\")\n\n    # Start producer in separate thread\n    producer_thread = threading.Thread(target=high_frequency_producer, daemon=True)\n    producer_thread.start()\n\n    # Monitor performance\n    start_time = time.time()\n    while True:\n        elapsed = time.time() - start_time\n        skarv.put(\"high_freq/performance\", f\"Running for {elapsed:.1f}s\")\n        time.sleep(5)\n\nstart_high_frequency_system()\n</code></pre>"},{"location":"user-guide/examples/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Complete API documentation</li> <li>Key Expressions - Learn about pattern matching</li> <li>Middleware - Transform data with middleware </li> </ul>"},{"location":"user-guide/key-expressions/","title":"Key Expressions","text":"<p>Key expressions are the foundation of Skarv's message routing system. They allow you to organize and route messages using hierarchical patterns and wildcards.</p>"},{"location":"user-guide/key-expressions/#basic-syntax","title":"Basic Syntax","text":"<p>Key expressions use a hierarchical structure with forward slashes (<code>/</code>) as separators:</p> <pre><code>level1/level2/level3\n</code></pre>"},{"location":"user-guide/key-expressions/#examples","title":"Examples","text":"<pre><code># Simple hierarchical keys\nskarv.put(\"sensor/temperature\", 22.5)\nskarv.put(\"device/001/status\", \"online\")\nskarv.put(\"user/preferences/theme\", \"dark\")\n</code></pre>"},{"location":"user-guide/key-expressions/#pattern-matching","title":"Pattern Matching","text":"<p>Skarv supports several wildcard patterns for flexible message routing:</p>"},{"location":"user-guide/key-expressions/#single-level-wildcard","title":"Single Level Wildcard (<code>*</code>)","text":"<p>Matches exactly one level in the hierarchy:</p> <pre><code># Subscribe to any device status\n@skarv.subscribe(\"device/*/status\")\ndef handle_device_status(sample):\n    device_id = str(sample.key_expr).split('/')[1]\n    print(f\"Device {device_id}: {sample.value}\")\n\n# This will match:\nskarv.put(\"device/001/status\", \"online\")  # \u2705\nskarv.put(\"device/002/status\", \"offline\") # \u2705\nskarv.put(\"device/status\", \"error\")       # \u274c (missing level)\nskarv.put(\"device/001/status/extra\", \"x\") # \u274c (too many levels)\n</code></pre>"},{"location":"user-guide/key-expressions/#multi-level-wildcard","title":"Multi-Level Wildcard (<code>**</code>)","text":"<p>Matches zero or more levels in the hierarchy:</p> <pre><code># Subscribe to all sensor data\n@skarv.subscribe(\"sensor/**\")\ndef handle_all_sensors(sample):\n    print(f\"All sensors - {sample.key_expr}: {sample.value}\")\n\n# This will match:\nskarv.put(\"sensor/temperature\", 22.5)           # \u2705\nskarv.put(\"sensor/room1/temperature\", 23.1)     # \u2705\nskarv.put(\"sensor/building/a/floor/2/temp\", 24) # \u2705\nskarv.put(\"sensor\", \"general\")                  # \u2705\n</code></pre>"},{"location":"user-guide/key-expressions/#mixed-patterns","title":"Mixed Patterns","text":"<p>You can combine exact matches with wildcards:</p> <pre><code># Subscribe to temperature readings from any room\n@skarv.subscribe(\"sensor/*/temperature\")\n\n# Subscribe to any sensor in room1\n@skarv.subscribe(\"sensor/room1/*\")\n\n# Subscribe to all data from device 001\n@skarv.subscribe(\"device/001/**\")\n</code></pre>"},{"location":"user-guide/key-expressions/#practical-examples","title":"Practical Examples","text":""},{"location":"user-guide/key-expressions/#iot-device-management","title":"IoT Device Management","text":"<pre><code>import skarv\n\n# Device status monitoring\n@skarv.subscribe(\"device/*/status\")\ndef monitor_device_status(sample):\n    device_id = str(sample.key_expr).split('/')[1]\n    print(f\"Device {device_id} status: {sample.value}\")\n\n# Temperature monitoring for all rooms\n@skarv.subscribe(\"sensor/*/temperature\")\ndef monitor_temperatures(sample):\n    room = str(sample.key_expr).split('/')[1]\n    print(f\"Room {room} temperature: {sample.value}\u00b0C\")\n\n# All sensor data logging\n@skarv.subscribe(\"sensor/**\")\ndef log_all_sensors(sample):\n    print(f\"Sensor log: {sample.key_expr} = {sample.value}\")\n\n# Simulate device network\nskarv.put(\"device/001/status\", \"online\")\nskarv.put(\"device/002/status\", \"offline\")\nskarv.put(\"sensor/living/temperature\", 22.5)\nskarv.put(\"sensor/bedroom/temperature\", 21.8)\nskarv.put(\"sensor/kitchen/humidity\", 65.2)\n</code></pre>"},{"location":"user-guide/key-expressions/#application-event-system","title":"Application Event System","text":"<pre><code>import skarv\n\n# User action events\n@skarv.subscribe(\"user/*/action\")\ndef handle_user_actions(sample):\n    user_id = str(sample.key_expr).split('/')[1]\n    print(f\"User {user_id} performed action: {sample.value}\")\n\n# System events\n@skarv.subscribe(\"system/**\")\ndef handle_system_events(sample):\n    print(f\"System event: {sample.key_expr} - {sample.value}\")\n\n# Error logging\n@skarv.subscribe(\"**/error\")\ndef handle_errors(sample):\n    print(f\"Error in {sample.key_expr}: {sample.value}\")\n\n# Simulate application events\nskarv.put(\"user/123/action\", \"login\")\nskarv.put(\"user/456/action\", \"logout\")\nskarv.put(\"system/startup\", \"Application started\")\nskarv.put(\"system/database/connection\", \"Connected\")\nskarv.put(\"user/123/error\", \"Invalid password\")\n</code></pre>"},{"location":"user-guide/key-expressions/#retrieving-data-with-patterns","title":"Retrieving Data with Patterns","text":"<p>The <code>skarv.get()</code> function also supports pattern matching:</p> <pre><code># Store some data\nskarv.put(\"device/001/temperature\", 23.5)\nskarv.put(\"device/002/temperature\", 24.1)\nskarv.put(\"device/001/humidity\", 65.2)\nskarv.put(\"device/002/humidity\", 68.1)\n\n# Retrieve all temperatures\ntemperatures = skarv.get(\"device/*/temperature\")\nprint(temperatures)\n# Output: [Sample(key_expr='device/001/temperature', value=23.5),\n#          Sample(key_expr='device/002/temperature', value=24.1)]\n\n# Retrieve all data for device 001\ndevice_001_data = skarv.put(\"device/001/*\")\nprint(device_001_data)\n# Output: [Sample(key_expr='device/001/temperature', value=23.5),\n#          Sample(key_expr='device/001/humidity', value=65.2)]\n\n# Retrieve all sensor data\nall_sensors = skarv.get(\"**\")\nprint(all_sensors)\n# Output: All stored samples\n</code></pre>"},{"location":"user-guide/key-expressions/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/key-expressions/#1-use-hierarchical-structure","title":"1. Use Hierarchical Structure","text":"<p>Organize your keys in a logical hierarchy:</p> <pre><code># Good\nskarv.put(\"sensor/room1/temperature\", 22.5)\nskarv.put(\"sensor/room1/humidity\", 65.2)\nskarv.put(\"device/001/status\", \"online\")\n\n# Avoid flat structures\nskarv.put(\"temperature_room1\", 22.5)  # Less flexible\n</code></pre>"},{"location":"user-guide/key-expressions/#2-be-specific-with-subscriptions","title":"2. Be Specific with Subscriptions","text":"<p>Use specific patterns to avoid unintended matches:</p> <pre><code># Specific subscription\n@skarv.subscribe(\"sensor/*/temperature\")  # Only temperature sensors\n\n# Too broad\n@skarv.subscribe(\"**\")  # Everything - use with caution\n</code></pre>"},{"location":"user-guide/key-expressions/#3-plan-your-key-structure","title":"3. Plan Your Key Structure","text":"<p>Design your key hierarchy before implementation:</p> <pre><code>application/\n\u251c\u2500\u2500 user/\n\u2502   \u251c\u2500\u2500 {user_id}/\n\u2502   \u2502   \u251c\u2500\u2500 profile\n\u2502   \u2502   \u251c\u2500\u2500 preferences\n\u2502   \u2502   \u2514\u2500\u2500 actions\n\u251c\u2500\u2500 system/\n\u2502   \u251c\u2500\u2500 status\n\u2502   \u251c\u2500\u2500 events\n\u2502   \u2514\u2500\u2500 errors\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 sensor/\n    \u2502   \u2514\u2500\u2500 {sensor_id}/\n    \u2514\u2500\u2500 device/\n        \u2514\u2500\u2500 {device_id}/\n</code></pre>"},{"location":"user-guide/key-expressions/#4-use-consistent-naming","title":"4. Use Consistent Naming","text":"<p>Maintain consistent naming conventions:</p> <pre><code># Use lowercase with underscores or hyphens\nskarv.put(\"user_profile\", {...})\nskarv.put(\"system-status\", \"running\")\n\n# Avoid mixed case or special characters\nskarv.put(\"UserProfile\", {...})  # Inconsistent\nskarv.put(\"system@status\", \"x\")  # Special characters\n</code></pre>"},{"location":"user-guide/key-expressions/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"user-guide/key-expressions/#conditional-subscriptions","title":"Conditional Subscriptions","text":"<p>You can use multiple subscriptions for complex routing:</p> <pre><code># Handle different types of alerts\n@skarv.subscribe(\"alert/critical/**\")\ndef handle_critical_alerts(sample):\n    print(f\"\ud83d\udea8 CRITICAL: {sample.value}\")\n\n@skarv.subscribe(\"alert/warning/**\")\ndef handle_warning_alerts(sample):\n    print(f\"\u26a0\ufe0f  WARNING: {sample.value}\")\n\n@skarv.subscribe(\"alert/info/**\")\ndef handle_info_alerts(sample):\n    print(f\"\u2139\ufe0f  INFO: {sample.value}\")\n</code></pre>"},{"location":"user-guide/key-expressions/#data-aggregation","title":"Data Aggregation","text":"<p>Use patterns to aggregate related data:</p> <pre><code># Aggregate all temperature readings\n@skarv.subscribe(\"sensor/*/temperature\")\ndef aggregate_temperatures(sample):\n    # Get all current temperatures\n    all_temps = skarv.get(\"sensor/*/temperature\")\n    avg_temp = sum(s.value for s in all_temps) / len(all_temps)\n    print(f\"Average temperature: {avg_temp}\u00b0C\")\n</code></pre>"},{"location":"user-guide/key-expressions/#next-steps","title":"Next Steps","text":"<ul> <li>Middleware - Transform data with middleware</li> <li>Examples - See more practical examples</li> <li>API Reference - Complete API documentation </li> </ul>"},{"location":"user-guide/middleware/","title":"Middleware","text":"<p>Middleware in Skarv allows you to transform, filter, and process data as it flows through the system. Middleware functions are applied to data before it reaches subscribers, enabling powerful data processing capabilities.</p>"},{"location":"user-guide/middleware/#how-middleware-works","title":"How Middleware Works","text":"<p>Middleware functions are registered for specific key patterns and are executed in sequence when data is published:</p> <pre><code>skarv.put() \u2192 Middleware 1 \u2192 Middleware 2 \u2192 ... \u2192 Storage \u2192 Subscribers\n</code></pre> <p>If any middleware returns <code>None</code>, the data flow stops and the value is not stored or sent to subscribers.</p>"},{"location":"user-guide/middleware/#built-in-middleware","title":"Built-in Middleware","text":"<p>Skarv provides several built-in middleware functions for common data processing tasks.</p>"},{"location":"user-guide/middleware/#throttling","title":"Throttling","text":"<p>Limit the rate of data updates to prevent overwhelming subscribers:</p> <pre><code>from skarv.middlewares import throttle\nimport skarv\n\n# Allow temperature updates at most once every 5 seconds\nskarv.register_middleware(\"sensor/temperature\", throttle(5.0))\n\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_temperature(sample):\n    print(f\"Temperature: {sample.value}\u00b0C\")\n\n# These will be throttled\nskarv.put(\"sensor/temperature\", 22.5)  # \u2705 First update\nskarv.put(\"sensor/temperature\", 23.1)  # \u274c Throttled (too soon)\nskarv.put(\"sensor/temperature\", 22.8)  # \u274c Throttled (too soon)\n</code></pre>"},{"location":"user-guide/middleware/#averaging","title":"Averaging","text":"<p>Compute moving averages over a window of samples:</p> <pre><code>from skarv.middlewares import average\nimport skarv\n\n# Average humidity readings over 10 samples\nskarv.register_middleware(\"sensor/humidity\", average(10))\n\n@skarv.subscribe(\"sensor/humidity\")\ndef handle_humidity(sample):\n    print(f\"Average humidity: {sample.value}%\")\n\n# Add some readings\nfor i in range(15):\n    skarv.put(\"sensor/humidity\", 60 + i)\n    # First 9 updates will show individual values\n    # Updates 10+ will show moving averages\n</code></pre>"},{"location":"user-guide/middleware/#weighted-averaging","title":"Weighted Averaging","text":"<p>Compute weighted moving averages with more recent values having higher weight:</p> <pre><code>from skarv.middlewares import weighted_average\nimport skarv\n\n# Weighted average over 5 samples\nskarv.register_middleware(\"sensor/pressure\", weighted_average(5))\n\n@skarv.subscribe(\"sensor/pressure\")\ndef handle_pressure(sample):\n    print(f\"Weighted average pressure: {sample.value} hPa\")\n</code></pre>"},{"location":"user-guide/middleware/#differentiation","title":"Differentiation","text":"<p>Compute the numerical derivative of values over time:</p> <pre><code>from skarv.middlewares import differentiate\nimport skarv\n\n# Compute rate of change for temperature\nskarv.register_middleware(\"sensor/temperature\", differentiate())\n\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_temperature_rate(sample):\n    if sample.value is not None:\n        print(f\"Temperature rate: {sample.value}\u00b0C/s\")\n    else:\n        print(\"First temperature reading - no rate available\")\n\n# Add readings with time intervals\nskarv.put(\"sensor/temperature\", 20.0)\ntime.sleep(1)\nskarv.put(\"sensor/temperature\", 22.0)  # Rate: 2.0\u00b0C/s\ntime.sleep(1)\nskarv.put(\"sensor/temperature\", 21.5)  # Rate: -0.5\u00b0C/s\n</code></pre>"},{"location":"user-guide/middleware/#batching","title":"Batching","text":"<p>Collect multiple values and emit them as a batch:</p> <pre><code>from skarv.middlewares import batch\nimport skarv\n\n# Collect 5 sensor readings before emitting\nskarv.register_middleware(\"sensor/readings\", batch(5))\n\n@skarv.subscribe(\"sensor/readings\")\ndef handle_batch(sample):\n    print(f\"Batch of {len(sample.value)} readings: {sample.value}\")\n\n# Add individual readings\nfor i in range(7):\n    skarv.put(\"sensor/readings\", f\"reading_{i}\")\n    # First 4 updates: no output (collecting)\n    # 5th update: batch of 5 readings\n    # 6th update: no output (collecting for next batch)\n    # 7th update: batch of 2 readings (if we stop here)\n</code></pre>"},{"location":"user-guide/middleware/#combining-middleware","title":"Combining Middleware","text":"<p>You can register multiple middleware functions for the same key pattern. They will be executed in the order of registration:</p> <pre><code>from skarv.middlewares import throttle, average\nimport skarv\n\n# First throttle, then average\nskarv.register_middleware(\"sensor/temperature\", throttle(2.0))\nskarv.register_middleware(\"sensor/temperature\", average(5))\n\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_processed_temperature(sample):\n    print(f\"Processed temperature: {sample.value}\u00b0C\")\n\n# This will:\n# 1. Throttle to at most once every 2 seconds\n# 2. Average over 5 samples\n# 3. Send to subscribers\n</code></pre>"},{"location":"user-guide/middleware/#custom-middleware","title":"Custom Middleware","text":"<p>You can create your own middleware functions. A middleware function should:</p> <ol> <li>Take a value as input</li> <li>Return the processed value or <code>None</code> to stop the flow</li> </ol>"},{"location":"user-guide/middleware/#example-data-validation","title":"Example: Data Validation","text":"<pre><code>def validate_temperature(value):\n    \"\"\"Validate temperature readings are within reasonable range.\"\"\"\n    if isinstance(value, (int, float)) and -50 &lt;= value &lt;= 100:\n        return value\n    else:\n        print(f\"Invalid temperature: {value}\")\n        return None\n\n# Register custom middleware\nskarv.register_middleware(\"sensor/temperature\", validate_temperature)\n\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_valid_temperature(sample):\n    print(f\"Valid temperature: {sample.value}\u00b0C\")\n\n# Test with valid and invalid data\nskarv.put(\"sensor/temperature\", 22.5)  # \u2705 Valid\nskarv.put(\"sensor/temperature\", 150)   # \u274c Invalid (too high)\nskarv.put(\"sensor/temperature\", \"hot\") # \u274c Invalid (not numeric)\n</code></pre>"},{"location":"user-guide/middleware/#example-data-transformation","title":"Example: Data Transformation","text":"<pre><code>def celsius_to_fahrenheit(value):\n    \"\"\"Convert Celsius to Fahrenheit.\"\"\"\n    if isinstance(value, (int, float)):\n        return (value * 9/5) + 32\n    return None\n\ndef add_timestamp(value):\n    \"\"\"Add timestamp to data.\"\"\"\n    import time\n    return {\n        \"value\": value,\n        \"timestamp\": time.time()\n    }\n\n# Register transformation middleware\nskarv.register_middleware(\"sensor/temperature\", celsius_to_fahrenheit)\nskarv.register_middleware(\"sensor/temperature\", add_timestamp)\n\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_transformed_temperature(sample):\n    print(f\"Temperature: {sample.value['value']}\u00b0F at {sample.value['timestamp']}\")\n\nskarv.put(\"sensor/temperature\", 22.5)\n# Output: Temperature: 72.5\u00b0F at 1640995200.123\n</code></pre>"},{"location":"user-guide/middleware/#example-data-filtering","title":"Example: Data Filtering","text":"<pre><code>def filter_outliers(value, threshold=10):\n    \"\"\"Filter out values that differ too much from the previous value.\"\"\"\n    def filter_func(current_value):\n        if not hasattr(filter_func, 'last_value'):\n            filter_func.last_value = current_value\n            return current_value\n\n        if abs(current_value - filter_func.last_value) &gt; threshold:\n            print(f\"Outlier detected: {current_value} (diff: {abs(current_value - filter_func.last_value)})\")\n            return None\n\n        filter_func.last_value = current_value\n        return current_value\n\n    return filter_func\n\n# Register outlier filter\nskarv.register_middleware(\"sensor/temperature\", filter_outliers(threshold=5))\n\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_filtered_temperature(sample):\n    print(f\"Filtered temperature: {sample.value}\u00b0C\")\n\n# Test with normal and outlier data\nskarv.put(\"sensor/temperature\", 22.0)  # \u2705 First reading\nskarv.put(\"sensor/temperature\", 24.0)  # \u2705 Normal change\nskarv.put(\"sensor/temperature\", 35.0)  # \u274c Outlier (diff &gt; 5)\nskarv.put(\"sensor/temperature\", 25.0)  # \u2705 Normal change\n</code></pre>"},{"location":"user-guide/middleware/#middleware-best-practices","title":"Middleware Best Practices","text":""},{"location":"user-guide/middleware/#1-order-matters","title":"1. Order Matters","text":"<p>Register middleware in the order you want them executed:</p> <pre><code># Good: Filter first, then process\nskarv.register_middleware(\"sensor/*\", validate_data)\nskarv.register_middleware(\"sensor/*\", average(10))\n\n# Avoid: Processing before filtering\nskarv.register_middleware(\"sensor/*\", average(10))\nskarv.register_middleware(\"sensor/*\", validate_data)  # Too late!\n</code></pre>"},{"location":"user-guide/middleware/#2-handle-none-returns","title":"2. Handle None Returns","text":"<p>Always check if middleware returns <code>None</code>:</p> <pre><code>def safe_middleware(value):\n    if value is None:\n        return None  # Stop the flow\n    # Process the value\n    return processed_value\n</code></pre>"},{"location":"user-guide/middleware/#3-use-specific-key-patterns","title":"3. Use Specific Key Patterns","text":"<p>Register middleware for specific keys to avoid unintended processing:</p> <pre><code># Specific to temperature sensors\nskarv.register_middleware(\"sensor/*/temperature\", throttle(5.0))\n\n# Avoid overly broad patterns\nskarv.register_middleware(\"**\", some_middleware)  # Processes everything!\n</code></pre>"},{"location":"user-guide/middleware/#4-consider-performance","title":"4. Consider Performance","text":"<p>Middleware runs synchronously, so keep it fast:</p> <pre><code># Good: Fast operation\ndef fast_middleware(value):\n    return value * 2\n\n# Avoid: Slow operations in middleware\ndef slow_middleware(value):\n    time.sleep(1)  # Blocks the entire flow!\n    return value\n</code></pre>"},{"location":"user-guide/middleware/#real-world-example-sensor-data-pipeline","title":"Real-World Example: Sensor Data Pipeline","text":"<pre><code>import skarv\nfrom skarv.middlewares import throttle, average, differentiate\nimport time\n\n# Set up a complete sensor data pipeline\ndef setup_sensor_pipeline():\n    # Temperature pipeline\n    skarv.register_middleware(\"sensor/temperature\", throttle(1.0))  # Max 1 update/sec\n    skarv.register_middleware(\"sensor/temperature\", average(5))     # 5-sample average\n    skarv.register_middleware(\"sensor/temperature\", differentiate()) # Rate of change\n\n    # Humidity pipeline\n    skarv.register_middleware(\"sensor/humidity\", throttle(2.0))     # Max 1 update/2sec\n    skarv.register_middleware(\"sensor/humidity\", average(3))        # 3-sample average\n\n    # Pressure pipeline\n    skarv.register_middleware(\"sensor/pressure\", batch(10))         # Batch 10 readings\n\n# Subscribers for processed data\n@skarv.subscribe(\"sensor/temperature\")\ndef handle_processed_temperature(sample):\n    if sample.value is not None:\n        print(f\"\ud83c\udf21\ufe0f  Processed temp: {sample.value}\u00b0C/s (rate of change)\")\n\n@skarv.subscribe(\"sensor/humidity\")\ndef handle_processed_humidity(sample):\n    print(f\"\ud83d\udca7 Processed humidity: {sample.value}% (averaged)\")\n\n@skarv.subscribe(\"sensor/pressure\")\ndef handle_batched_pressure(sample):\n    print(f\"\ud83d\udcca Pressure batch: {len(sample.value)} readings\")\n\n# Set up the pipeline\nsetup_sensor_pipeline()\n\n# Simulate sensor data\ndef simulate_sensors():\n    for i in range(20):\n        skarv.put(\"sensor/temperature\", 20 + i * 0.5)\n        skarv.put(\"sensor/humidity\", 60 + i * 2)\n        skarv.put(\"sensor/pressure\", 1000 + i * 5)\n        time.sleep(0.5)\n\n# Run the simulation\nsimulate_sensors()\n</code></pre>"},{"location":"user-guide/middleware/#next-steps","title":"Next Steps","text":"<ul> <li>Examples - See more practical examples</li> <li>API Reference - Complete middleware API documentation</li> <li>Core API - Learn about core Skarv functions </li> </ul>"},{"location":"user-guide/overview/","title":"Overview","text":""},{"location":"user-guide/overview/#architecture","title":"Architecture","text":"<p>Skarv is designed as a simple, in-memory message broker with the following architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Publishers    \u2502    \u2502   Middleware    \u2502    \u2502   Subscribers   \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 skarv.put()     \u2502\u2500\u2500\u2500\u25b6\u2502 Transform Data  \u2502\u2500\u2500\u2500\u25b6\u2502 @skarv.subscribe\u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502   In-Memory     \u2502\n                       \u2502     Vault       \u2502\n                       \u2502                 \u2502\n                       \u2502 skarv.get()     \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/overview/#core-components","title":"Core Components","text":""},{"location":"user-guide/overview/#1-vault-storage","title":"1. Vault (Storage)","text":"<p>The vault is an in-memory dictionary that stores all published data. It's thread-safe and uses locks to ensure data consistency.</p> <pre><code># Data is stored as key-value pairs\n_vault = {\n    \"sensor/temperature\": 22.5,\n    \"device/001/status\": \"online\",\n    \"user/preferences\": {\"theme\": \"dark\"}\n}\n</code></pre>"},{"location":"user-guide/overview/#2-subscribers","title":"2. Subscribers","text":"<p>Subscribers are functions that listen for data matching specific key patterns. They are automatically called when matching data is published.</p> <pre><code>@skarv.subscribe(\"sensor/*\")\ndef handle_sensor_data(sample):\n    # This function is called whenever data matching \"sensor/*\" is published\n    process_sensor_data(sample.value)\n</code></pre>"},{"location":"user-guide/overview/#3-middleware","title":"3. Middleware","text":"<p>Middleware functions transform data as it flows through the system. They can filter, modify, or aggregate data before it reaches subscribers.</p> <pre><code># Throttle updates to prevent spam\nskarv.register_middleware(\"sensor/temperature\", throttle(5.0))\n\n# Average readings over time\nskarv.register_middleware(\"sensor/humidity\", average(10))\n</code></pre>"},{"location":"user-guide/overview/#4-key-expressions","title":"4. Key Expressions","text":"<p>Key expressions provide flexible message routing using patterns and wildcards:</p> <ul> <li><code>sensor/temperature</code> - Exact match</li> <li><code>sensor/*</code> - Any sensor reading</li> <li><code>device/*/status</code> - Status of any device</li> <li><code>**</code> - Everything</li> </ul>"},{"location":"user-guide/overview/#data-flow","title":"Data Flow","text":"<p>Here's how data flows through Skarv:</p> <ol> <li>Publish: <code>skarv.put(\"sensor/temperature\", 22.5)</code></li> <li>Middleware Processing: Data passes through registered middleware</li> <li>Storage: Data is stored in the vault</li> <li>Subscription Notification: Matching subscribers are notified</li> <li>Retrieval: Data can be retrieved with <code>skarv.get()</code></li> </ol>"},{"location":"user-guide/overview/#thread-safety","title":"Thread Safety","text":"<p>All Skarv operations are thread-safe:</p> <ul> <li>Vault Access: Protected by locks</li> <li>Subscriber Management: Thread-safe set operations</li> <li>Middleware Processing: Each middleware has its own lock</li> </ul> <p>This means you can safely use Skarv in multi-threaded applications.</p>"},{"location":"user-guide/overview/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"user-guide/overview/#strengths","title":"Strengths","text":"<ul> <li>Low Latency: In-memory operations are very fast</li> <li>Simple: Minimal overhead from complex routing</li> <li>Predictable: Synchronous operations are easy to debug</li> </ul>"},{"location":"user-guide/overview/#limitations","title":"Limitations","text":"<ul> <li>Memory Bound: All data must fit in memory</li> <li>Single Process: No distributed capabilities</li> <li>No Persistence: Data is lost on restart</li> </ul>"},{"location":"user-guide/overview/#use-cases","title":"Use Cases","text":""},{"location":"user-guide/overview/#ideal-for","title":"Ideal For","text":"<ul> <li>Real-time Dashboards: Display live sensor data</li> <li>Event Processing: Handle application events</li> <li>Data Pipelines: Simple ETL processes</li> <li>Prototyping: Quick message broker setup</li> <li>IoT Applications: Connect sensors to processing logic</li> </ul>"},{"location":"user-guide/overview/#example-sensor-network","title":"Example: Sensor Network","text":"<pre><code>import skarv\nimport time\n\n# Set up middleware for data processing\nskarv.register_middleware(\"sensor/temperature\", average(5))\nskarv.register_middleware(\"sensor/humidity\", throttle(2.0))\n\n# Dashboard subscribers\n@skarv.subscribe(\"sensor/temperature\")\ndef update_temperature_display(sample):\n    print(f\"\ud83c\udf21\ufe0f  {sample.value}\u00b0C\")\n\n@skarv.subscribe(\"sensor/humidity\")\ndef update_humidity_display(sample):\n    print(f\"\ud83d\udca7 {sample.value}%\")\n\n@skarv.subscribe(\"alert/*\")\ndef handle_alerts(sample):\n    print(f\"\ud83d\udea8 {sample.value}\")\n\n# Simulate sensor network\ndef sensor_network():\n    while True:\n        # Simulate sensor readings\n        temp = 20 + random.uniform(-5, 5)\n        humidity = 60 + random.uniform(-10, 10)\n\n        skarv.put(\"sensor/temperature\", round(temp, 1))\n        skarv.put(\"sensor/humidity\", round(humidity, 1))\n\n        # Generate alerts\n        if temp &gt; 25:\n            skarv.put(\"alert/temperature\", \"High temperature detected!\")\n\n        time.sleep(1)\n\n# Start the network\nsensor_network()\n</code></pre>"},{"location":"user-guide/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Key Expressions - Learn about pattern matching</li> <li>Middleware - Transform and filter data</li> <li>Examples - See more practical examples </li> </ul>"}]}